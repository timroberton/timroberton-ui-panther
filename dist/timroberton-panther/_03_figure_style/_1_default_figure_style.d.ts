import { TextInfo, type ColorAdjustmentStrategy, type ColorKeyOrString, type PaddingOptions, type PointStyle } from "./deps.ts";
import type { CsvCellFormatterFunc, StyleFuncBoolean, StyleFuncColorKeyOrString, StyleFuncUpperLabel } from "./style_func_types.ts";
import type { DataLabelPositionOffset, LegendItemsSource, LegendPosition, PaletteLogic } from "./types.ts";
declare const _DS: {
    scale: number;
    stacked: "not-stacked" | "stacked" | "imposed";
    horizontal: boolean;
    withBars: boolean;
    withOutline: boolean;
    withDataLabels: boolean;
    padding: PaddingOptions;
    baseText: TextInfo;
    paletteColors: {
        logic: PaletteLogic;
        single: ColorKeyOrString;
        auto: {
            first: ColorKeyOrString;
            last: ColorKeyOrString;
        };
        specific: ColorKeyOrString[];
        func: StyleFuncColorKeyOrString;
    };
    palettePointStyles: {
        logic: PaletteLogic;
        single: PointStyle;
        auto: PointStyle[];
        specific: PointStyle[];
    };
    legendGap: number;
    captionGap: number;
    footnoteGap: number;
    legendItemsSource: LegendItemsSource;
    legend: {
        legendPosition: LegendPosition;
        maxLegendItemsInOneColumn: number | number[];
        legendColorBoxWidth: number;
        legendItemVerticalGap: number;
        legendLabelGap: number;
        legendPointRadius: number;
        legendPointStrokeWidth: number;
        legendPointInnerColorStrategy: ColorAdjustmentStrategy;
        reverseOrder: boolean;
    };
    sankey: {
        labelBottomGap: number;
        labelRightGap: number;
        itemGap: number;
        itemWidth: number;
    };
    xTextAxis: {
        verticalTickLabels: boolean;
        maxVerticalTickLabelHeightAsPctOfChart: number;
        showGrid: boolean;
        paddingLeft: number;
        paddingRight: number;
        labelGap: number;
        tickHeight: number;
        tickLabelGap: number;
        tickLabelPaddingX: number;
        colGroupGap: number;
        colGroupLabelPaddingX: number;
        colGroupBracketGapTop: number;
        colGroupBracketGapBottom: number;
        colGroupBracketPaddingX: number;
        colGroupBracketTickHeight: number;
    };
    xScaleAxis: {
        max: number | "auto";
        min: number | "auto";
        showGrid: boolean;
        labelGap: number;
        tickHeight: number;
        tickLabelGap: number;
        tickLabelFormatter: (v: number) => string;
    };
    yTextAxis: {
        colHeight: number;
        showGrid: boolean;
        paddingTop: number;
        paddingBottom: number;
        labelGap: number;
        tickWidth: number;
        tickLabelGap: number;
        logicTickLabelWidth: "fixed" | "auto";
        logicColGroupLabelWidth: "fixed" | "auto";
        maxTickLabelWidthAsPctOfChart: number;
        maxColGroupLabelWidthAsPctOfChart: number;
        colGroupGap: number;
        colGroupBracketGapLeft: number;
        colGroupBracketGapRight: number;
        colGroupBracketPaddingY: number;
        colGroupBracketTickWidth: number;
        verticalColGroupLabels: boolean;
    };
    yScaleAxis: {
        max: number | "auto";
        min: number | "auto";
        showGrid: boolean;
        labelGap: number;
        tickWidth: number;
        tickLabelGap: number;
        tickLabelFormatter: (v: number) => string;
        forceTopOverhangHeight: number | "none";
    };
    multiChart: {
        logicContentHeights: "equal" | "specific";
        subChartGapX: number;
        subChartGapY: number;
        nPerRow: number;
        nSlotsToSkip: number;
        subCaptionGap: number;
    };
    axisStrokeWidth: number;
    gridStrokeWidth: number;
    colGroupBracketStrokeWidth: number;
    axisColor: ColorKeyOrString;
    gridColor: ColorKeyOrString;
    colGroupBracketColor: ColorKeyOrString;
    backgroundColor: ColorKeyOrString;
    textAxisTickLabelFormatter: (v: string) => string;
    dataLabelFormatter: CsvCellFormatterFunc<number, string>;
    dataLabelPositions: CsvCellFormatterFunc<number, DataLabelPositionOffset>;
    dataLabelGapYPoints: number;
    dataLabelGapXPoints: number;
    dataLabelGapYBars: number;
    dataLabelGapXBars: number;
    dataLabelOffsetXBars: number;
    dataLabelPositionVerticalScale: "right" | "left" | "alternating";
    dataLabelPositionHorizontalScale: "bottom" | "top" | "alternating";
    dataLabelPositionTwoWayScale: "right" | "bottom" | "top" | "left";
    pctOfCol: number;
    pctOfSeries: number;
    barOpacity: number;
    pointRadius: number;
    pointStrokeWidth: number;
    pointInnerColorStrategy: ColorAdjustmentStrategy;
    errorBarColorStrategy: ColorAdjustmentStrategy;
    errorBarWidthProportionOfPoint: number;
    errorBarWidthProportionOfBar: number;
    arrowGap: number;
    arrowLength: number;
    arrowLabelGap: number;
    arrowColor: ColorKeyOrString;
    withArrows: boolean | StyleFuncBoolean;
    arrowLabelFormatter: CsvCellFormatterFunc<number, string>;
    cascadeArrows: {
        showArrows: boolean | StyleFuncBoolean;
        arrowColor: ColorKeyOrString | StyleFuncColorKeyOrString;
        arrowLabelFormatter: CsvCellFormatterFunc<number, string>;
        arrowStrokeWidth: number;
        arrowLengthPctOfSpace: number;
        arrowHeadLength: number;
        arrowLabelGap: number;
        upperLabels: "none" | StyleFuncUpperLabel;
        upperLabelWidthPctOfCol: number;
        upperLabelGapFromChartAreaY: number;
    };
    outlineOpacity: number;
    getOutlineOpacity: "none" | ((index: number) => number);
    outlineType: "straight" | "curved" | "rounded";
    outlineRoundedRadius: number;
    getOutlineWidth: "none" | ((index: number) => number);
};
export type DefaultFigureStyle = typeof _DS;
export declare function getDefaultFigureStyle(): DefaultFigureStyle;
export {};
